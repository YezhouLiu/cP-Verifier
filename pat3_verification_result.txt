=======================================================
Assertion: P0() nonterminating
********Verification Result********
The Assertion (P0() nonterminating) is NOT valid.
The following trace leads to a terminating situation.
<init -> cp_init -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if((applied == true))] -> τ -> r1 -> r2 -> [if!((applied == true))] -> terminate>

********Verification Setting********
Admissible Behavior: All
Search Engine: First Witness Trace using Depth First Search
System Abstraction: False


********Verification Statistics********
Visited States:365
Total Transitions:365
Time Used:0.0256232s
Estimated Memory Used:9019.608KB


=======================================================
Assertion: P0() deadlockfree
********Verification Result********
The Assertion (P0() deadlockfree) is VALID.

********Verification Setting********
Admissible Behavior: All
Search Engine: First Witness Trace using Depth First Search
System Abstraction: False


********Verification Statistics********
Visited States:365
Total Transitions:365
Time Used:0.0014091s
Estimated Memory Used:8991.768KB


=======================================================
Assertion: P0() divergencefree
********Verification Result********
The Assertion (P0() divergencefree) is VALID.

********Verification Setting********
Admissible Behavior: All
Search Engine: Strongly Connected Component Based Search
System Abstraction: False


********Verification Statistics********
Visited States:366
Total Transitions:365
Time Used:0.0104177s
Estimated Memory Used:9691.968KB


=======================================================
Assertion: P0() deterministic
********Verification Result********
The Assertion (P0() deterministic) is VALID.

********Verification Setting********
Admissible Behavior: All
Search Engine: First Witness Trace using Depth First Search
System Abstraction: False


********Verification Statistics********
Visited States:366
Total Transitions:365
Time Used:0.0033425s
Estimated Memory Used:9085.144KB


